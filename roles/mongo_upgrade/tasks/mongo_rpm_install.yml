---
<<<<<<< HEAD
=======
- name: get mongo version
  shell:  /usr/bin/mongod --version | grep 'db version' |awk -F 'v' '{print $3}'
  register: mongo_version

- name: check mongo version upgraded
  fail:
    msg: The host {{ansible_ssh_host}} is already upgraded to {{version}}
  when: mongo_version.stdout == version

>>>>>>> master
- name: lock chef
  copy:
    content: "MongoDB Upgrade: chef locked until further notice."
    dest: /tmp/chef.lock
    force: no
    group: sys
    owner: root
    mode: 0755
  tags: skip

- name: find mongo services on the node
<<<<<<< HEAD
  shell: systemctl list-unit-files --type service --state enabled,generated | grep mongodb_ | awk '{print $1}'
=======
  shell: systemctl list-unit-files --type service --state enabled,generated | grep mongodb | awk '{print $1}'
>>>>>>> master
  register: mongo_service

- name: Stop Mongo custom service
  systemd:
    name: "{{ mongo_service.stdout }}"
    state: stopped
    no_block: no
     
<<<<<<< HEAD
- name: Confirm Mongo Custom Service is down
  command: service {{ mongo_service.stdout }} status
  register: agent_status
  failed_when: "'Active: active (running)' in agent_status.stdout"
  changed_when: False

=======
>>>>>>> master

- name: upgrading mongo version
  yum:
    name: 
        - mongodb-org-server-{{ version }}
        - mongodb-org-shell-{{ version }}
        - mongodb-org-tools-{{ version }}
  when:  ansible_distribution == 'CentOS' 

- name: disabling mongo deafualt service
  systemd:
    name: mongod
    state: stopped
    enabled: no
    daemon_reload: yes

- name: Starting Mongo custom service
  systemd:
    name: "{{ mongo_service.stdout }}"
    state: started
    no_block: no

<<<<<<< HEAD
- name: Confirm Mongo Custom Service is up
  command: service {{ mongo_service.stdout }} status
  register: agent_status
  failed_when: "'Active: inactive (dead)' in agent_status.stdout or 'Active: failed'  in agent_status.stdout"
  changed_when: False


- name: Check replica returned to replication
  command: mongo --quiet {{ansible_ssh_host}} -u "{{ root_user }}" -p "{{ root_pass }}" --authenticationDatabase admin --eval "rs.slaveOk();rs.status()['members'].forEach(function(member) {print(member['stateStr']);})" 
  register: replica_status
  until: "'not reachable/healthy' not in replica_status.stdout  and replica_status.rc == 0 "
  retries: 10
  delay: 10
=======
>>>>>>> master




